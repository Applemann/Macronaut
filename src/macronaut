#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""

  Copyright (c) 2016-2018 Martin Jablecnik
  Authors: Martin Jablecnik
  Description: Script for record macros
  

  Usage:
    macronaut record <name>
    macronaut compile <name> [--speed=<num>]
    macronaut play <name> [--speed=<num>] [--repeat=<num>] [--delay=<sec>]     
    macronaut delete <name>
    macronaut (ls | list)
    macronaut (-h | --help)
    macronaut (-v | --version)
  
  Options:
    -h --help           Show this screen.
    -v --version        Show version.
    -s --speed=<num>    Speed in float number [default: 1].
    -r --repeat=<num>   Number of repeating [default: 1].
    -d --delay=<sec>    Delay time in seconds before run macro [default: 0].
  
"""

from docopt import docopt

import sys, os
from macronaut import macro, config
from time import sleep


def main():                                                        
    os.system('mkdir -p ' + config.OUTPUT_PATH)
    os.system('mkdir -p ' + config.RAW_PATH)

    global macro
    args = docopt(__doc__, version='1.2.0')

    if args['<name>']:
        name = args['<name>']
    else:
        name = "default_name"

    if args['record']:
        macro.record( config.RAW_PATH, name )
    if args['compile']:
        macro.compile( config.RAW_PATH, config.OUTPUT_PATH, name, float(args['--speed']) )
    if args['play']:
        macro.compile( config.RAW_PATH, config.OUTPUT_PATH, name, float(args['--speed']) )
        macro_path = os.path.join(config.OUTPUT_PATH, name+".macro")

        sleep(float(args['--delay']))
        for i in range(int(args['--repeat'])):
            print "Run macro with repeat: "+str(i)
            os.system('bash ' + macro_path)

    if args['list'] or args['ls']:
        files = os.listdir(config.OUTPUT_PATH)
        files.sort()
        macros = []
        for file in files:
            if '.raw' in file:
                continue
            else:
                print file.split('.')[0]
    if args['delete']:
        macros = os.listdir(config.OUTPUT_PATH)
        if name+".macro" or name+".raw" in macros:
            macro_file = os.path.join(config.OUTPUT_PATH, name+".macro")
            raw_file = os.path.join(config.OUTPUT_PATH, name+".raw")
            os.remove(macro_file)
            os.remove(raw_file)
            print "Macro \"%s\" removed." % name
        else:
            print "Macro with name \"%s\" doesn't exists." % name


if __name__ == "__main__":
    main()
