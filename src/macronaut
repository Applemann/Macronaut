#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""

  Copyright (c) 2016-2018 Martin Jablecnik
  Authors: Martin Jablecnik
  Description: Script for record macros
  

  Usage:
    macronaut record [--fast-mouse] <name>
    macronaut play <name> [--speed=<num>] [--repeat=<num>] [--delay=<sec>]     
    macronaut (rm | remove) <name>
    macronaut rename <old-name> <new-name>
    macronaut (ls | list)
    macronaut (-h | --help)
    macronaut (-v | --version)
  
  Options:
    -h --help           Show this screen.
    -v --version        Show version.
    -s --speed=<num>    Speed in float number [default: 1].
    -r --repeat=<num>   Number of repeating [default: 1].
    -d --delay=<sec>    Delay time in seconds before run macro [default: 0].
    -f --fast-mouse     Run recording for fast mouse
  
"""

from docopt import docopt

import sys, os
import macronaut
from macronaut import macro, config
from time import sleep


def main():                                                        
    os.system('mkdir -p ' + config.OUTPUT_PATH)
    os.system('mkdir -p ' + config.RAW_PATH)

    global macro
    args = docopt(__doc__, version=macronaut.__version__)

    if args['<name>']:
        name = args['<name>']
    else:
        name = "default_name"

    if args['record']:
        if args['--fast-mouse']:
            print "Start recording..."
            print "Recording stop by shortcut: shortcut: R_Ctrl"
            macro.fast_mouse_record( config.RAW_PATH, name )
        else:
            print "Start recording..."
            print "Recording stop by shortcut: R_Ctrl"
            macro.record( config.RAW_PATH, name )
    #if args['compile']:
    #    macro.compile( config.RAW_PATH, config.OUTPUT_PATH, name, float(args['--speed']) )
    if args['play']:
        macro.compile( config.RAW_PATH, config.OUTPUT_PATH, name, float(args['--speed']) )
        macro_path = os.path.join(config.OUTPUT_PATH, name+".macro")

        sleep(float(args['--delay']))
        for i in range(int(args['--repeat'])):
            print "Run macro with repeat: "+str(i)
            os.system('bash ' + macro_path)

    if args['list'] or args['ls']:
        files = os.listdir(config.RAW_PATH)
        files.sort()
        macros = []
        for file in files:
            if '.macro' in file:
                continue
            else:
                print file.split('.')[0]
    if args['rm']:
        macros = os.listdir(config.OUTPUT_PATH)
        macros += os.listdir(config.RAW_PATH)
        if name+".macro" in macros:
            macro_file = os.path.join(config.OUTPUT_PATH, name+".macro")
            os.remove(macro_file)
            print "Macro \"%s\" was removed." % name
        if name+".raw" in macros:
            raw_file = os.path.join(config.RAW_PATH, name+".raw")
            os.remove(raw_file)
            print "Raw file \"%s\" was removed." % name
    if args['rename']:
        old_name = args['<old-name>']
        new_name = args['<new-name>']
        macros = os.listdir(config.OUTPUT_PATH) + os.listdir(config.RAW_PATH)
        suffix = ".macro"
        if old_name+suffix in macros:
            old_macro_file = os.path.join(config.OUTPUT_PATH, old_name+suffix)
            new_macro_file = os.path.join(config.OUTPUT_PATH, new_name+suffix)
            os.rename(old_macro_file, new_macro_file)
            #print "Macro \"%s\" was renamed to \"%s\"." % (old_name, new_name)
        suffix = ".raw"
        if old_name+suffix in macros:
            old_macro_file = os.path.join(config.RAW_PATH, old_name+suffix)
            new_macro_file = os.path.join(config.RAW_PATH, new_name+suffix)
            os.rename(old_macro_file, new_macro_file)
            #print "Raw file \"%s\" was renamed to \"%s\"." % (old_name, new_name)
            print "\"%s\" renamed to \"%s\"" % (old_name, new_name)


if __name__ == "__main__":
    main()
