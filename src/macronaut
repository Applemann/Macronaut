#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""

  Copyright (c) 2016-2017 Martin Jablecnik
  Authors: Martin Jablecnik
  Description: Script for record macros
  
"""


import sys, os
import argparse
import macro, config


def clear():
    os.system("rm -rf " + config.RAW_FILE)

    

def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('--record', action='store_true', default=False, dest='record', help='Only record keyboard inputs and save into raw_data format.')
    parser.add_argument('--compile', action='store_true', default=False, dest='compile', help='Compile raw_data format into python runable script which is saved into OUTPUT_PATH.')
    parser.add_argument('--play', action='store_true', default=False, dest='play', help='Play macro script.')
    parser.add_argument('--name', action='store', default="default_macro", dest='name', help='Change name of macro script.')
    parser.add_argument('--speed', action='store', default=1, dest='speed', help='Setup how fast you want it.')
    parser.add_argument('--verbose', action='store_true', default=config.VERBOSE, dest='verbose', help='Print output into stdout.')
    parser.add_argument('--output-path', action='store', default=config.OUTPUT_PATH, dest='output_path', help='Setup path where save generated macro script.')
    parser.add_argument('--version', action='version', version='0.5.0')
    parser.add_argument('--list', action='store_true', default=False, dest='list', help='List names all possible macros.')
    parser.add_argument('--delete', action='store', default=None, dest='delete', help='Delete macro.')
    return parser.parse_args()



def main():                                                        
    os.system('mkdir -p ' + config.OUTPUT_PATH)
    args = parse_arguments()

    config.VERBOSE = args.verbose
    #print config.RAW_FILE

    if args.record:
        macro.record()		
    if args.compile:
        macro.compile(args.output_path+'/'+args.name, float(args.speed))
    if args.play:
        os.system('bash '+args.output_path+'/'+args.name)
    if args.list:
        macros = os.listdir(args.output_path)
        macros.sort()
        for macro in macros:
            print macro
    if args.delete != None:
        macros = os.listdir(args.output_path)
        if args.delete in macros:
            os.remove(args.output_path + "/" + args.delete)
            print "Macro \"%s\" removed." % (args.delete,)
        else:
            print "Macro with name \"%s\" doesn't exists." % (args.delete,)





if __name__ == "__main__":
    main()
